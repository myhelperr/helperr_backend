{"version":3,"file":"authController.js","sources":["controllers/authController.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport createError from 'http-errors';\r\n\r\nimport prisma from '../configs/prisma';\r\nimport { supabase, supabaseAdmin } from '../configs/supaBase';\r\nimport catchAsync from '../utils/catchAsync';\r\nimport {\r\n  resendOtpEmail,\r\n  sendOtpEmail,\r\n  sendPasswordResetEmail,\r\n} from '../utils/email';\r\n\r\nexport const SignUp = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const { email, password, confirmPassword, fullName, homeAddress } =\r\n      req.body;\r\n\r\n    // validate input fields\r\n    if (!email || !password || !confirmPassword || !fullName) {\r\n      return next(createError(400, 'All fields are required'));\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return next(createError(400, 'Passwords do not match'));\r\n    }\r\n\r\n    //  check if user exists\r\n    const existingUser = await prisma.user.findUnique({ where: { email } });\r\n    if (existingUser) return next(createError(400, 'Email already exists'));\r\n\r\n    // create user in Supabase\r\n    const { data: supaBaseData, error: supaBaseError } =\r\n      await supabase.auth.signUp({ email, password });\r\n\r\n    if (supaBaseError) return next(createError(400, supaBaseError.message));\r\n    const userId = supaBaseData.user?.id;\r\n    if (!userId)\r\n      return next(createError(500, 'Failed to retrieve user ID from Supabase'));\r\n\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString(); // Generate a 6-digit OTP code\r\n    const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000); // Set time to 10 minutes from now\r\n    const accessToken = supaBaseData.session?.access_token || null;\r\n    const refreshToken = supaBaseData.session?.refresh_token || null;\r\n\r\n    // create user in Prisma\r\n    const newUser = await prisma.user.create({\r\n      data: {\r\n        id: userId,\r\n        email,\r\n        fullName,\r\n        homeAddress,\r\n        otpCode,\r\n        otpExpiresAt,\r\n        accessToken,\r\n        refreshToken,\r\n      },\r\n    });\r\n\r\n    if (!newUser) {\r\n      // Rollback Supabase user creation if Prisma user creation fails\r\n      await prisma.user.delete({ where: { id: userId } });\r\n      return next(createError(500, 'Failed to create user'));\r\n    }\r\n\r\n    await sendOtpEmail(fullName, email, otpCode);\r\n\r\n    res.status(201).send({\r\n      status: 'success',\r\n      message: 'User created successfully, please verify your email',\r\n    });\r\n  },\r\n);\r\n\r\nexport const ResendOTP = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const { email } = req.body;\r\n\r\n    const user = await prisma.user.findUnique({ where: { email } });\r\n    if (!user) return next(createError(404, 'User not found'));\r\n\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString(); // Generate a 6-digit OTP code\r\n    const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000); // Set time to 10 minutes from now\r\n\r\n    // Update user with new OTP code and expiration\r\n    await prisma.user.update({\r\n      where: { email },\r\n      data: {\r\n        otpCode,\r\n        otpExpiresAt,\r\n      },\r\n    });\r\n\r\n    resendOtpEmail(user.fullName, email, otpCode);\r\n\r\n    res.status(200).send({\r\n      status: 'success',\r\n      message: 'OTP resent successfully',\r\n    });\r\n  },\r\n);\r\n\r\nexport const VerifyOTP = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const { otpCode } = req.body;\r\n\r\n    // Validate input fields\r\n    if (!otpCode) {\r\n      return next(createError(400, 'OTP code is required'));\r\n    }\r\n\r\n    // Check if user exists with this OTP code\r\n    const user = await prisma.user.findFirst({ where: { otpCode } });\r\n    if (!user) return next(createError(404, 'Invalid OTP code'));\r\n\r\n    // Check if OTP code is expired\r\n    if (user.otpExpiresAt && user.otpExpiresAt < new Date()) {\r\n      return next(createError(400, 'OTP code has expired'));\r\n    }\r\n\r\n    const headers = {\r\n      'access-token': `${user.accessToken}`,\r\n      'refresh-token': `${user.refreshToken}`,\r\n    };\r\n\r\n    // Mark user as verified\r\n    await prisma.user.update({\r\n      where: { email: user.email },\r\n      data: {\r\n        isVerified: true,\r\n        otpCode: null,\r\n        otpExpiresAt: null,\r\n        accessToken: null,\r\n        refreshToken: null,\r\n      },\r\n    });\r\n\r\n    res.header(headers).status(200).send({\r\n      status: 'success',\r\n      message: 'Email verified successfully',\r\n    });\r\n  },\r\n);\r\n\r\nexport const Login = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const { email, password } = req.body;\r\n\r\n    if (!email || !password)\r\n      return next(createError(400, 'Email and password are required'));\r\n\r\n    const user = await prisma.user.findUnique({ where: { email } });\r\n    if (!user) return next(createError(404, 'User not found'));\r\n\r\n    if (!user.isVerified)\r\n      return next(\r\n        createError(403, 'Please verify your email before logging in'),\r\n      );\r\n\r\n    // LOGIN WITH SUPABASE\r\n    const { data: supaBaseData, error: supaBaseError } =\r\n      await supabase.auth.signInWithPassword({ email, password });\r\n    if (supaBaseError) return next(createError(400, supaBaseError.message));\r\n\r\n    const accessToken = supaBaseData.session?.access_token || null;\r\n    const refreshToken = supaBaseData.session?.refresh_token || null;\r\n\r\n    const headers = {\r\n      'access-token': `${accessToken}`,\r\n      'refresh-token': `${refreshToken}`,\r\n    };\r\n\r\n    res.header(headers).status(200).send({\r\n      status: 'success',\r\n      message: 'Login successful',\r\n    });\r\n  },\r\n);\r\n\r\nexport const RefreshToken = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const refreshToken = req.headers['refresh-token'];\r\n\r\n    if (!refreshToken || typeof refreshToken !== 'string') {\r\n      return next(createError(400, 'Refresh token is required'));\r\n    }\r\n\r\n    const { data, error } = await supabase.auth.refreshSession({\r\n      refresh_token: refreshToken,\r\n    });\r\n\r\n    if (error || !data.session) {\r\n      return next(createError(401, `${error?.message}`));\r\n    }\r\n\r\n    const headers = {\r\n      'access-token': `${data.session.access_token}`,\r\n      'refresh-token': `${data.session.refresh_token}`,\r\n    };\r\n\r\n    res\r\n      .header(headers)\r\n      .status(200)\r\n      .send({\r\n        status: 'success',\r\n        message: 'Session refreshed successfully',\r\n        data: {\r\n          expiresAt: data.session.expires_at,\r\n        },\r\n      });\r\n  },\r\n);\r\n\r\nexport const GetProfile = catchAsync(\r\n  async (req: Request, res: Response, __: NextFunction) => {\r\n    const user = req.user;\r\n\r\n    // const user = await prisma.user.findUnique({ where: { id: userId } });\r\n\r\n    res.status(200).send({\r\n      status: 'success',\r\n      message: 'Profile retrieved successfully',\r\n      data: {\r\n        user: {\r\n          email: user?.email,\r\n          fullName: user?.fullName,\r\n          homeAddress: user?.homeAddress,\r\n          isVerified: user?.isVerified,\r\n          picture: user?.picture,\r\n          skills: user?.skills,\r\n          aboutMe: user?.aboutMe,\r\n        },\r\n      },\r\n    });\r\n  },\r\n);\r\n\r\nexport const ForgotPassword = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const { email } = req.body;\r\n\r\n    if (!email) {\r\n      return next(createError(400, 'Email is required'));\r\n    }\r\n\r\n    const user = await prisma.user.findUnique({ where: { email } });\r\n    if (!user) return next(createError(404, 'User not found'));\r\n\r\n    const { data, error } = await supabaseAdmin.auth.admin.generateLink({\r\n      type: 'recovery',\r\n      email: user.email,\r\n    });\r\n\r\n    if (error) return next(createError(400, error.message));\r\n\r\n    sendPasswordResetEmail(user.fullName, email, data?.properties.email_otp);\r\n\r\n    res.status(200).send({\r\n      status: 'success',\r\n      message: 'OTP code sent to your email',\r\n    });\r\n  },\r\n);\r\n\r\nexport const VerifyPasswordResetOTP = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const { email, otpCode } = req.body;\r\n\r\n    if (!email || !otpCode) {\r\n      return next(createError(400, 'Email and OTP code are required'));\r\n    }\r\n\r\n    // Verify OTP with Supabase\r\n    const { data, error } = await supabase.auth.verifyOtp({\r\n      email,\r\n      token: otpCode,\r\n      type: 'recovery',\r\n    });\r\n\r\n    if (error) {\r\n      return next(createError(400, 'Invalid or expired OTP code'));\r\n    }\r\n\r\n    if (!data.session) {\r\n      return next(createError(400, 'Failed to verify OTP'));\r\n    }\r\n\r\n    const headers = {\r\n      'access-token': `${data.session.access_token}`,\r\n      'refresh-token': `${data.session.refresh_token}`,\r\n    };\r\n\r\n    res.header(headers).status(200).send({\r\n      status: 'success',\r\n      message: 'OTP verified successfully. You can now reset your password.',\r\n    });\r\n  },\r\n);\r\n\r\nexport const ResetPassword = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const refreshToken = req.headers['refresh-token'];\r\n\r\n    const { password, confirmPassword } = req.body;\r\n\r\n    if (password !== confirmPassword) {\r\n      return next(createError(400, 'Passwords do not match'));\r\n    }\r\n\r\n    if (!refreshToken || typeof refreshToken !== 'string') {\r\n      return next(createError(401, 'Refresh token is required'));\r\n    }\r\n\r\n    // Refresh the session using only the refresh token\r\n    const { data: sessionData, error: sessionError } =\r\n      await supabase.auth.refreshSession({\r\n        refresh_token: refreshToken,\r\n      });\r\n\r\n    if (sessionError || !sessionData.session) {\r\n      return next(createError(401, 'Invalid or expired refresh token'));\r\n    }\r\n\r\n    // Update password using the refreshed session\r\n    const { error } = await supabase.auth.updateUser({ password });\r\n\r\n    if (error) {\r\n      return next(createError(400, error.message));\r\n    }\r\n\r\n    res.status(200).send({\r\n      status: 'success',\r\n      message:\r\n        'Password reset successfully. You can now login with your new password.',\r\n    });\r\n  },\r\n);\r\n\r\nexport const UpdateProfile = catchAsync(\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    const email = req.user?.email;\r\n    if (!email) {\r\n      return next(createError(400, 'User email not found'));\r\n    }\r\n\r\n    const { fullName, homeAddress, skills, aboutMe, picture } = req.body;\r\n\r\n    // Validate that at least one field is being updated\r\n    if (!fullName && !homeAddress && !skills && !aboutMe && !picture) {\r\n      return next(createError(400, 'No fields to update'));\r\n    }\r\n\r\n    // Update user in Prisma database\r\n    const updatedUser = await prisma.user.update({\r\n      where: { email },\r\n      data: { fullName, homeAddress, skills, aboutMe, picture },\r\n    });\r\n\r\n    res.status(200).send({\r\n      status: 'success',\r\n      message: 'Profile updated successfully',\r\n      data: {\r\n        user: {\r\n          fullName: updatedUser.fullName,\r\n          homeAddress: updatedUser.homeAddress,\r\n          picture: updatedUser.picture,\r\n          skills: updatedUser.skills,\r\n          aboutMe: updatedUser.aboutMe,\r\n        },\r\n      },\r\n    });\r\n  },\r\n);\r\n\r\n// export const VerifyDocuments = catchAsync( async(req: Request, res: Response, next: NextFunction) => {\r\n\r\n//   // const { state, city, address, gender, IDType, IDImage} = req.body;\r\n\r\n// })\r\n"],"names":[],"mappings":"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","debug_id":"d85a1a29-7377-59b9-acca-f0f7df8f1a87"}