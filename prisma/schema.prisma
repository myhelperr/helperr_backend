// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todos")
}

enum Role {
  USER
  ADMIN
  HELPERR
}

model User {
  id        String   @id @default(cuid())
  fullName  String
  email     String   @unique
  homeAddress   String?
  aboutMe   String?
  skills    String?
  picture   String?
  password  String?
  isVerified Boolean @default(false)
  otpCode   String?
  otpExpiresAt DateTime?
  accessToken String?
  refreshToken String?
  googleId  String?  @unique
  role      Role     @default(USER)
  verifications IdentityVerification[]  // One user can have many verifications
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Database-level constraints
  @@index([email])
  @@index([googleId])
  @@map("users")
}

enum VERIFICATION_STATUS {
  PENDING
  APPROVED
  REJECTED
}

model IdentityVerification {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id]) 
  userId      String   // Foreign key to User
  state       String
  city        String
  street      String
  gender      String
  documentType String
  documentImage String
  status      VERIFICATION_STATUS   @default(PENDING)
  remarks     String?
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("identity_verifications")
  @@index([userId])
}

// Run the following command to create migration files and update your database schema:

// npx prisma migrate dev --name [migration name]

// npm run migrate:dev || npm run migrate:deploy
// npm run migrate:dev is recommended during development, and npm run migrate:deploy is recommended for production deployments.

// 'npm run generate' to generate Prisma Client after changing the schema.
